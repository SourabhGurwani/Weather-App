{"version":3,"sources":["components/MainWeatherWindow.js","components/CityInput.js","components/WeatherBox.js","components/Loader.js","App.js","index.js"],"names":["MainWeatherWindow","_ref","city","data","children","backgroundClass","weatherDesc","weather_desc","includes","React","createElement","className","src","icon","alt","Math","round","temp","toLowerCase","humidity","wind","CityInput","makeApiCall","cityName","setCityName","useState","onSearchClick","async","test","inputElement","document","querySelector","classList","add","isSuccess","placeholder","remove","alert","type","value","onChange","e","target","onKeyPress","key","style","top","onClick","onRefreshClick","disabled","WeatherBox","date","Date","getDay","Loader","App","setCity","undefined","days","setDays","loading","setLoading","error","setError","getDayIndices","dayIndices","index","currentDay","list","dt_txt","slice","i","push","response","fetch","json","cod","name","updatedDays","map","listItem","weather","description","main","speed","updateState","err","day","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.70f904f1.chunk.js","sourcesContent":["import React from 'react';\nimport './MainWeatherWindow.css';\n\nconst getBackgroundClass = (weatherDesc) => {\n  if (weatherDesc.includes('rain')) return 'rainy-bg';\n  if (weatherDesc.includes('sun')) return 'sunny-bg';\n  if (weatherDesc.includes('cloud')) return 'cloudy-bg';\n  return 'default-bg';\n};\n\nconst MainWeatherWindow = ({ city, data,children }) => {\n  const backgroundClass = data ? getBackgroundClass(data.weather_desc) : 'default-bg';\n\n  return (\n    <div className={`main ${backgroundClass}`}>\n      <div className='inner-main'>\n        {!city && <h1 className='title'>Weather Forecast</h1>}\n        {city && data && (\n          <div className='weather-container'>\n            <div className='icon-container'>\n              <img\n                src={`http://openweathermap.org/img/wn/${data.icon === \"01n\" ? \"01d\" : data.icon}@2x.png`}\n                alt='weather icon'\n                className='weather-icon'\n              />\n              <h1 className='city-name'>{city}</h1>\n            </div>\n            <div className='today'>\n              <p className='temperature'>Temperature: {Math.round(data.temp)}°C</p>\n              <p className='description'>{data.weather_desc.toLowerCase()}</p>\n              <p className='humidity'>Humidity: {data.humidity}%</p>\n              <p className='wind'>Wind Speed: {data.wind} km/h</p>\n            </div>\n          </div>\n        )}\n      </div>\n      {children}\n    </div>\n  );\n};\n\nexport default MainWeatherWindow;","import React, { useState } from 'react';\nimport './CityInput.css';\n\nconst CityInput = ({ city, makeApiCall }) => {\n  const [cityName, setCityName] = useState('');\n\n  const onSearchClick = async () => {\n    if (/^[a-zA-Z\\s]+$/.test(cityName)) {\n      const inputElement = document.querySelector('.city-input');\n      inputElement.classList.add('loading');\n\n      const isSuccess = await makeApiCall(cityName);\n      inputElement.placeholder = isSuccess ? 'Enter a City...' : 'City not found, try again...';\n\n      inputElement.classList.remove('loading');\n      setCityName('');\n    } else {\n      alert('Please enter a valid city name.');\n    }\n  };\n\n  const onRefreshClick = () => {\n    if (city) makeApiCall(city); // Refresh the weather for the current city\n  };\n\n  const onKeyPressHandler = async (e) => {\n    if (e.key === 'Enter') {\n      onSearchClick();\n    }\n  };\n\n  return (\n    <div className='city-input-container'>\n      <input\n        className='city-input'\n        type='text'\n        value={cityName}\n        placeholder='Enter a City...'\n        onChange={(e) => setCityName(e.target.value)}\n        onKeyPress={onKeyPressHandler}\n        style={{\n          top: city ? '-380px' : '-20px',\n        }}\n      />\n      <div className='button-container'>\n        <button className='search-button' onClick={onSearchClick}>\n          🔍\n        </button>\n        <button className='refresh-button' onClick={onRefreshClick} disabled={!city}>\n          🔄\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default CityInput;\n","import React from 'react';\nimport './WeatherBox.css';\n\nconst WeatherBox = ({ date, icon, temp, humidity, wind }) => {\n  const getDay = (dateString) => {\n    const daysOfWeek = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n    return daysOfWeek[new Date(dateString).getDay()];\n  };\n\n  return (\n    <div className='weather-box'>\n      <h1>{date ? getDay(date) : ''}</h1>\n      <img\n          src={`http://openweathermap.org/img/wn/${icon === \"01n\" ? \"01d\" : icon}@2x.png`}\n          alt='weather icon'\n      />\n      <span className='temp'>{temp}°C</span>\n      <p>Humidity: {humidity}%</p>\n      <p>Wind: {wind} km/h</p>\n    </div>\n  );\n};\n\nexport default WeatherBox;\n","import React from 'react';\r\nimport './Loader.css';\r\n\r\nconst Loader = () => {\r\n  return <div className='loader'></div>;\r\n};\r\n\r\nexport default Loader;\r\n","import React, { useState } from 'react';\nimport './App.css';\nimport MainWeatherWindow from './components/MainWeatherWindow';\nimport CityInput from './components/CityInput';\nimport WeatherBox from './components/WeatherBox';\nimport Loader from './components/Loader';\n\nconst App = () => {\n  const [city, setCity] = useState(undefined);\n  const [days, setDays] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(''); // State for error message\n\n  const updateState = (data) => {\n    const cityName = data.city.name;\n    const dayIndices = getDayIndices(data);\n\n    // console.log(data.list[0].weather[0].icon);\n    // console.log(data.list[1].weather[1].icon);\n    \n    const updatedDays = dayIndices.map(index => {\n      const listItem = data.list[index];\n      return {\n        date: listItem.dt_txt,\n        weather_desc: listItem.weather[0].description,\n        icon: listItem.weather[0].icon,\n        temp: Math.round(listItem.main.temp),\n        humidity: listItem.main.humidity,\n        wind: Math.round(listItem.wind.speed * 3.6)\n      };\n    });\n\n    setCity(cityName);\n    setDays(updatedDays);\n    setLoading(false);\n    setError(''); // Clear error on successful fetch\n  };\n  const api_key = process.env.REACT_APP_API_KEY;\n  const makeApiCall = async (cityName) => {\n    setLoading(true);\n    try {\n      const response = await fetch(\n        `https://api.openweathermap.org/data/2.5/forecast?q=${cityName}&units=metric&APPID=${api_key}`\n      );\n      const data = await response.json();\n\n      if (data.cod === '200') {\n        updateState(data);\n        return true;\n      } else {\n        setError('City not found. Please try again.');\n        setLoading(false);\n        return false;\n      }\n    } catch (err) {\n      setError('Failed to fetch data. Please check your connection.');\n      setLoading(false);\n      return false;\n    }\n  };\n\n  const getDayIndices = (data) => {\n    let dayIndices = [0];\n    let index = 0;\n    let currentDay = data.list[index].dt_txt.slice(8, 10);\n\n    for (let i = 0; i < 4; i++) {\n      while (\n        currentDay === data.list[index].dt_txt.slice(8, 10) ||\n        data.list[index].dt_txt.slice(11, 13) !== '15'\n      ) {\n        index++;\n      }\n      dayIndices.push(index);\n      currentDay = data.list[index].dt_txt.slice(8, 10);\n    }\n    return dayIndices;\n  };\n\n  return (\n    <div className='App'>\n      <header className='App-header'>\n        {loading ? (\n          <Loader />\n        ) : (\n          <MainWeatherWindow data={days[0]} city={city} error={error} >\n            <CityInput city={city} makeApiCall={makeApiCall} />\n            {error && <p className='error-message'>{error}</p>} {/* Error Message */}\n            <ul className='weather-box-list'>\n              {days.slice(1).map((day, index) => (\n                <li key={index}>\n                  <WeatherBox {...day} />\n                </li>\n              ))}\n            </ul>\n          </MainWeatherWindow>\n        )}\n      </header>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}